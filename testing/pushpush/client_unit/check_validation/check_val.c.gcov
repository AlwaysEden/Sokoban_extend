        -:    0:Source:check_val.c
        -:    0:Graph:check_val.gcno
        -:    0:Data:check_val.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:
        -:    4:#define NAME_SIZE 16
        -:    5:enum entity {
        -:    6:        EMPTY = 0,
        -:    7:        BLOCK = -1,
        -:    8:        ITEM = -9, //item will be -10 ~ -110
        -:    9:        USER = 1, //user wil be 1 ~ 3
        -:   10:        BASE = 9, //base will be 10 ~ 30
        -:   11:};
        -:   12:
        -:   13:enum spans {
        -:   14:        UP,
        -:   15:        DOWN,
        -:   16:        LEFT,
        -:   17:        RIGHT
        -:   18:};
        -:   19:typedef struct location{
        -:   20:    int x;
        -:   21:    int y;
        -:   22:} location_t;
        -:   23:
        -:   24:typedef struct user{
        -:   25:    char name[NAME_SIZE];
        -:   26:    int score;
        -:   27:    location_t base_loc;
        -:   28:    location_t user_loc;
        -:   29:}user_t;
        -:   30:
        -:   31:typedef struct object_data{
        -:   32:    int map_width;
        -:   33:        int map_height;
        -:   34:    int timeout;
        -:   35:    int max_user;
        -:   36:    struct user * users;
        -:   37:    location_t * item_locations;
        -:   38:    location_t * block_locations;
        -:   39:}object_data_t;
        -:   40:
        -:   41:object_data_t Model;
        -:   42:
        -:   43:int map[5][5] = { {0, 0, -1, 0, 0},
        -:   44:    		  {0, 0, -10, 0, 0},
        -:   45:		  {-1, -12, 0, -11, -1},
        -:   46:		  {0, 0, -13, 0, 0},
        -:   47:		  {0, 0, -1, 0, 0} }; //임의로 map 설정
        -:   48:
function check_validation called 4 returned 100% blocks executed 51%
        4:   49:int check_validation(int cmd){
        4:   50:        int user_idx = cmd/4;
        4:   51:        int span = cmd%4;
        4:   52:	Model.users = malloc(sizeof(struct user)); //임의로 할당
        4:   53:	Model.map_width = Model.map_height = 5;
        -:   54:        int curr_x, curr_y, target_x, target_y, item_target_x, item_target_y;
        4:   55:        curr_x = target_x = item_target_x = Model.users[user_idx].user_loc.x = 2;
        4:   56:        curr_y = target_y = item_target_y = Model.users[user_idx].user_loc.y = 2;
        4:   57:        switch(span){
branch  0 taken 1
branch  1 taken 1
branch  2 taken 1
branch  3 taken 1
branch  4 taken 0
        1:   58:                case UP:
        1:   59:                        if((target_y = (curr_y - 1)) < 0) return 0;//out of array
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:   60:                        else if(map[target_y][target_x] == EMPTY) return 1; //empty
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:   61:                        else if(map[target_y][target_x] > BASE) return 1; //base
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:   62:                        else if(map[target_y][target_x] < ITEM){
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   63:                                if((item_target_y = (target_y - 1)) < 0) return 0; //item and non-movabel
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:   64:                                if(map[item_target_y][item_target_x] == EMPTY) return map[target_y][target_x]; //item and movable
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:   65:                                if((map[item_target_y][item_target_x] > BASE) && ((map[item_target_y][item_target_x]) == ((user_idx + 1) * 10))) return (0 - map[target_y][target_x]);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
branch  2 never executed
branch  3 never executed
        1:   66:                                if(map[item_target_y][item_target_x] > BASE) return map[target_y][target_x]; //item and movable as other's base
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:   67:                                else return 0;  //others (block, user, base)
    #####:   68:                        }else return 0;
        -:   69:                        break;
        -:   70:
        1:   71:                case DOWN:
        1:   72:                        if((target_y = (curr_y + 1)) > Model.map_height -1 ) return 0;//out of array
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:   73:                        else if(map[target_y][target_x] == EMPTY) return 1; //empty
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:   74:                        else if(map[target_y][target_x] > BASE) return 1; //base
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:   75:                        else if(map[target_y][target_x] < ITEM){
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   76:                                if((item_target_y = (target_y + 1)) > Model.map_height - 1) return 0; //item and non-movabel
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:   77:                                if(map[item_target_y][item_target_x] == EMPTY) return map[target_y][target_x]; //item and movable
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:   78:                                if((map[item_target_y][item_target_x] > BASE) && ((map[item_target_y][item_target_x]) == ((user_idx + 1) * 10))) return (0 - map[target_y][target_x]);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
branch  2 never executed
branch  3 never executed
        1:   79:                                if(map[item_target_y][item_target_x] > BASE) return map[target_y][target_x]; //item and movable as other's base
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:   80:                                else return 0;  //others (block, user, base)
    #####:   81:                        }else return 0;
        -:   82:                        break;
        -:   83:
        -:   84:
        1:   85:                case LEFT:
        1:   86:                        if((target_x = (curr_x - 1)) < 0) return 0;//out of array
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:   87:                        else if(map[target_y][target_x] == EMPTY) return 1; //empty
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:   88:                        else if(map[target_y][target_x] > BASE) return 1; //base
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:   89:                        else if(map[target_y][target_x] < ITEM){
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   90:                                if((item_target_x = (target_x - 1)) < 0) return 0; //item and non-movabel
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:   91:                                if(map[item_target_y][item_target_x] == EMPTY) return map[target_y][target_x]; //item and movable
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:   92:                                if((map[item_target_y][item_target_x] > BASE) && ((map[item_target_y][item_target_x]) == ((user_idx + 1)  * 10))) return (0 - map[target_y][target_x]);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
branch  2 never executed
branch  3 never executed
        1:   93:                                if(map[item_target_y][item_target_x] > BASE) return map[target_y][target_x]; //item and movable as other's base
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:   94:
        1:   95:                                else return 0;  //others (block, user, base)
    #####:   96:                        }else return 0;
        -:   97:                        break;
        -:   98:
        1:   99:                case RIGHT:
        1:  100:                        if((target_x = (curr_x + 1)) > Model.map_width  - 1) return 0;//out of array
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:  101:                        else if(map[target_y][target_x] == EMPTY) return 1; //empty
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:  102:                        else if(map[target_y][target_x] > BASE) return 1; //base
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:  103:                        else if(map[target_y][target_x] < ITEM){
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  104:                                if((item_target_x = (target_x + 1)) > Model.map_width -1) return 0; //item and non-movabel
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:  105:                                if(map[item_target_y][item_target_x] == EMPTY) return map[target_y][target_x]; //item and movable
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:  106:                                if((map[item_target_y][item_target_x] > BASE) && ((map[item_target_y][item_target_x]) == ((user_idx + 1) * 10))) return (0 - map[target_y][target_x]);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
branch  2 never executed
branch  3 never executed
        1:  107:                                if(map[item_target_y][item_target_x] > BASE) return map[target_y][target_x]; //item and movable as other's base
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:  108:                                else return 0;  //others (block, user, base)
    #####:  109:                        }else return 0;
        -:  110:                        break;
        -:  111:        }
    #####:  112:        return 0;
        -:  113:}
        -:  114:
function main called 1 returned 100% blocks executed 100%
        1:  115:int main(){
        1:  116:	int input[] = {0, 1, 2, 3};
        5:  117:	for(int i = 0; i < 4; i++){
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:  118:		check_validation(input[i]);
call    0 returned 4
        -:  119:	}
        -:  120:}
